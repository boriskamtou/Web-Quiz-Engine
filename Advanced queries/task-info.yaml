type: edu
files:
  - name: src/engine/WebQuizEngine.java
    visible: true
    text: |
      package engine;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class WebQuizEngine {
      
          public static void main(String[] args) {
              SpringApplication.run(WebQuizEngine.class, args);
          }
      
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |
      server.port=8889
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
    learner_created: false
  - name: test/tests/WebQuizEngineTest.java
    visible: false
    text: |
      package tests;
      
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import engine.WebQuizEngine;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;
      
      public class WebQuizEngineTest extends SpringTest {
          public WebQuizEngineTest() {
              super(WebQuizEngine.class, "../quizdb.mv.db");
          }
      
          static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                      resp.getRequest().getMethod() + " " +
                          resp.getRequest().getLocalUri() +
                          " should respond with status code " + status + ", " +
                          "responded: " + resp.getStatusCode() + "\n\n" +
                          "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          private static String quiz1 =
              "{\n" +
                  "  \"title\": \"The Java Logo\", \n" +
                  "  \"text\": \"What is depicted on the Java logo?\",\n" +
                  "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                  "  \"answer\": [2]\n" +
                  "}";
      
          private static String quiz2 =
              "{\n" +
                  "  \"title\": \"The Ultimate Question\",\n" +
                  "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                  "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                  "  \"answer\": [1]\n" +
                  "}";
      
          private static String quiz3 =
              "{\n" +
                  "  \"title\": \"Math1\",\n" +
                  "  \"text\": \"Which of the following is equal to 4?\",\n" +
                  "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                  "  \"answer\": [0,1]\n" +
                  "}";
      
          private static String quiz4 =
              "{\n" +
                  "  \"title\": \"Math2\",\n" +
                  "  \"text\": \"Which of the following is equal to 4?\",\n" +
                  "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                  "  \"answer\": [1,3]\n" +
                  "}";
      
          private static String quiz5 =
              "{\n" +
                  "  \"title\": \"Math3\",\n" +
                  "  \"text\": \"Which of the following is equal to 4?\",\n" +
                  "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                  "  \"answer\": []\n" +
                  "}";
      
          private static String quiz6 =
              "{\n" +
                  "  \"title\": \"Math4\",\n" +
                  "  \"text\": \"Which of the following is equal to 4?\",\n" +
                  "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                  "}";
      
          private static String quiz7 =
              "{\n" +
                  "  \"title\": \"Math5\",\n" +
                  "  \"text\": \"Which of the following is equal to 4?\",\n" +
                  "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                  "  \"answer\": [0,1,3]\n" +
                  "}";
      
          private static String[] quizzes = new String[] {
              quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
          };
      
          private static int[] quizIds = new int[] {
              0, 0, 0, 0, 0, 0, 0
          };
      
          private static String error400noTitle =
              "{\n" +
                  "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                  "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                  "  \"answer\": [1]\n" +
                  "}";
      
          private static String error400emptyTitle =
              "{\n" +
                  "  \"title\": \"\",\n" +
                  "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                  "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                  "  \"answer\": [1]\n" +
                  "}";
      
          private static String error400noText =
              "{\n" +
                  "  \"title\": \"123123123\",\n" +
                  "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                  "  \"answer\": [1]\n" +
                  "}";
      
          private static String error400emptyText =
              "{\n" +
                  "  \"title\": \"The Ultimate Question\",\n" +
                  "  \"text\": \"\",\n" +
                  "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                  "  \"answer\": [1]\n" +
                  "}";
      
          private static String error400noOptions =
              "{\n" +
                  "  \"title\": \"The Ultimate Question\",\n" +
                  "  \"text\": \"123123123\",\n" +
                  "  \"answer\": [1]\n" +
                  "}";
      
          private static String error400emptyOptions =
              "{\n" +
                  "  \"title\": \"The Ultimate Question\",\n" +
                  "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                  "  \"options\": [ ]\n" +
                  "  \"answer\": [ ]\n" +
                  "}";
      
          private static String error400oneOption =
              "{\n" +
                  "  \"title\": \"The Ultimate Question\",\n" +
                  "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                  "  \"options\": [\"Everything goes right\"]\n" +
                  "  \"answer\": [0]\n" +
                  "}";
      
      
          private static String login1 = "test@google.com";
          private static String pass1 = "qwerty";
      
          private static String login2 = "user@google.com";
          private static String pass2 = "12345";
      
          private static HttpRequest auth(HttpRequest req, int user) {
              String login;
              String pass;
              if (user == 1) {
                  login = login1;
                  pass = pass1;
              } else if (user == 2) {
                  login = login2;
                  pass = pass2;
              } else {
                  login = fakeLogin;
                  pass = fakePass;
              }
              return req.basicAuth(login, pass);
          }
      
          private static String fakeLogin = "qwerty@google.com";
          private static String fakePass = "456534";
      
          private static String noAtInLogin_login = "google.com";
          private static String noAtInLogin_pass = "asddfggh";
      
          private static String noDotInLogin_login = "well@googlecom";
          private static String noDotInLogin_pass = "rtyfgcxsfd";
      
          private static String loginExist_login = "test@google.com";
          private static String loginExist_pass = "rtyfgcxsfd1";
      
          private static String shortPassword_login = "someuser@gmail.com";
          private static String shortPassword_pass = "1234";
      
          private static String shortPassword2_login = "someuser2@gmail.com";
          private static String shortPassword2_pass = "123";
      
          @DynamicTestingMethod
          DynamicTesting[] dt = new DynamicTesting[] {
              // Test login
              () -> testRegister(login1, pass1, 200),
              () -> testRegister(login2, pass2, 200),
              () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
              () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
              () -> testRegister(loginExist_login, loginExist_pass, 400),
              () -> testRegister(shortPassword_login, shortPassword_pass, 400),
              () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),
      
      
              // Add 2 quizzes and check their existence
              () -> testAllQuizzes(0, 0,1),
              () -> testAllQuizzes(0, 0,2),
      
              () -> testCreateQuiz(0, 1),
              () -> testQuizExists(0, 2),
              () -> testQuizNotExists(0, 2, 125),
      
              () -> testAllQuizzes(1, 0,1),
      
              () -> testCreateQuiz(1, 2),
              () -> testQuizExists(1, 2),
              () -> testQuizNotExists(1, 2, 125),
      
              () -> testAllQuizzes(2, 0,2),
      
      
              // No auth operations tests
              () -> testAllQuizzesNoAuth(),
              () -> testCreateQuizNoAuth(1),
              () -> testCreateQuizNoAuth(2),
              () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
              () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
              () -> testDeleteQuizzesNoAuth(quizIds[0]),
              () -> testDeleteQuizzesNoAuth(quizIds[1]),
              () -> testCompletedQuizzesNoAuth(),
      
      
              // Fake auth operations tests
              () -> testAllQuizzesFakeAuth(),
              () -> testCreateQuizFakeAuth(1),
              () -> testCreateQuizFakeAuth(2),
              () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
              () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
              () -> testDeleteQuizzesFakeAuth(quizIds[0]),
              () -> testDeleteQuizzesFakeAuth(quizIds[1]),
              () -> testCompletedQuizzesFakeAuth(),
      
      
              // Solve two quizzes
              () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
              () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
              () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
              () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),
      
              () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
              () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),
              () -> checkQuizSuccess(quizIds[1], "[2]", false, 1),
              () -> checkQuizSuccess(quizIds[1], "[3]", false, 2),
      
      
              // Check completed
              () -> testCompletedQuizzes(1, 1, 0 ,0, quizIds[0]),
              () -> testCompletedQuizzes(1, 2, 0, 0, quizIds[1]),
      
      
              // Test database save
              () -> testAllQuizzes(2, 0, 1),
              () -> testAllQuizzes(2, 0,2),
              () -> reloadServer(),
              () -> testAllQuizzes(2, 0,1),
              () -> testAllQuizzes(2, 0,2),
              () -> checkQuizSuccess(quizIds[0], "[2]", true, 2),
              () -> checkQuizSuccess(quizIds[0], "[3]", false, 1),
              () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
              () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),
      
      
              // Check completed
              () -> testCompletedQuizzes(2, 1, 0 ,1, quizIds[0]),
              () -> testCompletedQuizzes(2, 1, 0 ,0, quizIds[1]),
      
              () -> testCompletedQuizzes(2, 2, 0, 1, quizIds[1]),
              () -> testCompletedQuizzes(2, 2, 0, 0, quizIds[0]),
      
      
              // Test wrongly created quizzes
              () -> addIncorrectQuiz(error400noTitle, 1),
              () -> addIncorrectQuiz(error400emptyTitle, 2),
              () -> addIncorrectQuiz(error400noText, 1),
              () -> addIncorrectQuiz(error400emptyText, 2),
              () -> addIncorrectQuiz(error400noOptions, 1),
              () -> addIncorrectQuiz(error400emptyOptions, 2),
              () -> addIncorrectQuiz(error400oneOption, 1),
      
      
              // Test multiple answers
              () -> testCreateQuiz(2, 1),
              () -> testQuizExists(2, 1),
              () -> testQuizNotExists(2, 1, 125),
              () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
              () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
              () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
              () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
              () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
              () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
              () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
              () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
              () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
              () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
              () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
              () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
              () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
              () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
              () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),
      
              () -> testCreateQuiz(3, 1),
              () -> testQuizExists(3, 1),
              () -> testQuizNotExists(3, 1, 125),
              () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
              () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
              () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
              () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
              () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
              () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
              () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
              () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
              () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
              () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
              () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
              () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
              () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
              () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
              () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),
      
              () -> testCreateQuiz(4, 1),
              () -> testQuizExists(4, 1),
              () -> testQuizNotExists(4, 1, 125),
              () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
              () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
              () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
              () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
              () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
              () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
              () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
              () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
              () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
              () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
              () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
              () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
              () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
              () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),
      
              () -> testCreateQuiz(5, 1),
              () -> testQuizExists(5, 1),
              () -> testQuizNotExists(5, 1, 125),
              () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
              () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),
      
              () -> testCreateQuiz(6, 1),
              () -> testQuizExists(6, 1),
              () -> testQuizNotExists(6, 1, 125),
              () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
              () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),
      
              () -> testAllQuizzes(7, 0,2),
              () -> reloadServer(),
              () -> testAllQuizzes(7, 0,2),
              () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
              () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
              () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
      
      
              // Check completed
              () -> testCompletedQuizzes(5, 1, 0 ,4, quizIds[0]),
              () -> testCompletedQuizzes(5, 1, 0 ,3, quizIds[1]),
              () -> testCompletedQuizzes(5, 1, 0 ,2, quizIds[4]),
              () -> testCompletedQuizzes(5, 1, 0 ,1, quizIds[5]),
              () -> testCompletedQuizzes(5, 1, 0 ,0, quizIds[5]),
      
              () -> testCompletedQuizzes(6, 2, 0, 5, quizIds[1]),
              () -> testCompletedQuizzes(6, 2, 0, 4, quizIds[0]),
              () -> testCompletedQuizzes(6, 2, 0, 3, quizIds[2]),
              () -> testCompletedQuizzes(6, 2, 0, 2, quizIds[3]),
              () -> testCompletedQuizzes(6, 2, 0, 1, quizIds[6]),
              () -> testCompletedQuizzes(6, 2, 0, 0, quizIds[6]),
      
      
              // Test pagination completed quizzes
              () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
              () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 1),
      
              () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
              () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
              () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
              () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
              () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
              () -> checkQuizSuccess(quizIds[5], "[]", true, 2),
      
              () -> testCompletedQuizzes(10, 1, 0 ,0, quizIds[6]),
              () -> testCompletedQuizzes(10, 1, 0 ,1, quizIds[4]),
              () -> testCompletedQuizzes(10, 1, 0 ,2, quizIds[4]),
              () -> testCompletedQuizzes(10, 1, 0 ,3, quizIds[4]),
              () -> testCompletedQuizzes(10, 1, 0 ,4, quizIds[4]),
              () -> testCompletedQuizzes(10, 1, 0 ,5, quizIds[4]),
              () -> testCompletedQuizzes(1, 1, 1 ,0, quizIds[0]),
      
              () -> testCompletedQuizzes(10, 2, 0 ,0, quizIds[5]),
              () -> testCompletedQuizzes(10, 2, 0 ,1, quizIds[3]),
              () -> testCompletedQuizzes(10, 2, 0 ,2, quizIds[3]),
              () -> testCompletedQuizzes(10, 2, 0 ,3, quizIds[3]),
              () -> testCompletedQuizzes(10, 2, 0 ,4, quizIds[3]),
              () -> testCompletedQuizzes(10, 2, 0 ,5, quizIds[3]),
              () -> testCompletedQuizzes(2, 2, 1 ,1, quizIds[1]),
              () -> testCompletedQuizzes(2, 2, 1 ,0, quizIds[0]),
      
      
              // Test delete
              () -> testDelete(quizIds[0], 1, 204),
              () -> testDelete(quizIds[0], 1, 404),
              () -> testQuizNotExists(0, 1, 0),
              () -> testQuizNotExists(0, 2, 0),
              () -> testQuizExists(1, 1),
              () -> testQuizExists(1, 2),
      
              () -> testDelete(quizIds[1], 1, 403),
              () -> testDelete(quizIds[1], 1, 403),
              () -> testDelete(quizIds[1], 2, 204),
              () -> testDelete(quizIds[1], 2, 404),
              () -> testDelete(quizIds[1], 1, 404),
              () -> testQuizNotExists(0, 1, 0),
              () -> testQuizNotExists(0, 2, 0),
              () -> testQuizNotExists(1, 1, 0),
              () -> testQuizNotExists(1, 2, 0),
      
              () -> testAllQuizzes(5, 0,1),
              () -> reloadServer(),
              () -> testAllQuizzes(5, 0,2),
              () -> testQuizNotExists(0, 1, 0),
              () -> testQuizNotExists(0, 2, 0),
              () -> testQuizNotExists(1, 1, 0),
              () -> testQuizNotExists(1, 2, 0),
      
      
              // Test pagination all quizzes
              () -> testCreateQuiz(6, 1),
              () -> testCreateQuiz(6, 2),
              () -> testCreateQuiz(6, 1),
              () -> testCreateQuiz(6, 1),
              () -> testCreateQuiz(6, 1),
              () -> testCreateQuiz(6, 2),
              () -> testCreateQuiz(6, 1),
              () -> testCreateQuiz(6, 2),
              () -> testCreateQuiz(6, 1),
              () -> testCreateQuiz(6, 2),
              () -> testAllQuizzes(10, 0,1),
              () -> testAllQuizzes(10, 0,2),
              () -> testAllQuizzes(5, 1,1),
              () -> testAllQuizzes(5, 1,2),
          };
      
          private CheckResult testRegister(String login, String password, int status) {
              JsonObject json = new JsonObject();
              json.addProperty("email", login);
              json.addProperty("password", password);
      
              String url = "/api/register";
              HttpRequest req = post(url, getPrettyJson(json));
              HttpResponse resp = req.send();
      
              checkStatusCode(resp, status);
              return CheckResult.correct();
          }
      
          private CheckResult testCreateQuizNoAuth(int quizNum) {
              String url = "/api/quizzes";
              HttpRequest req = post(url, quizzes[quizNum]);
              HttpResponse resp = req.send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testCreateQuizFakeAuth(int quizNum) {
              String url = "/api/quizzes";
              HttpRequest req = post(url, quizzes[quizNum]);
              HttpResponse resp = auth(req, 3).send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
              String url = "/api/quizzes/" + quizNum + "/solve";
              HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
              HttpResponse resp = req.send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
              String url = "/api/quizzes/" + quizNum + "/solve";
              HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
              HttpResponse resp = auth(req, 3).send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testAllQuizzesNoAuth() {
              String url = "/api/quizzes";
              HttpResponse resp = get(url).send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testAllQuizzesFakeAuth() {
              String url = "/api/quizzes";
              HttpResponse resp = auth(get(url), 3).send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
              String url = "/api/quizzes/" + quizNum;
              HttpRequest req = delete(url);
              HttpResponse resp = req.send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
              String url = "/api/quizzes/" + quizNum;
              HttpRequest req = delete(url);
              HttpResponse resp = auth(req, 3).send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testCompletedQuizzesNoAuth() {
              String url = "/api/quizzes/completed";
              HttpRequest req = get(url).addParam("page", "0");
              HttpResponse resp = req.send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testCompletedQuizzesFakeAuth() {
              String url = "/api/quizzes/completed";
              HttpRequest req = get(url).addParam("page", "0");
              HttpResponse resp = auth(req, 3).send();
              checkStatusCode(resp, 401);
              return CheckResult.correct();
          }
      
          private CheckResult testCreateQuiz(int quizNum, int user) {
              String url = "/api/quizzes";
              HttpRequest req = post(url, quizzes[quizNum]);
              HttpResponse resp = auth(req, user).send();
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("id", isInteger(i -> {
                          quizIds[quizNum] = i;
                          return true;
                      }))
                      .anyOtherValues()
              );
      
              return CheckResult.correct();
          }
      
          private CheckResult testQuizExists(int quizNum, int user) {
              int quizId = quizIds[quizNum];
              String quiz = quizzes[quizNum];
      
              String url = "/api/quizzes/" + quizId;
      
              HttpResponse resp = auth(get(url), user).send();
              checkStatusCode(resp, 200);
      
              JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
              rightQuiz.remove("answer");
              rightQuiz.addProperty("id", quizId);
      
              expect(getPrettyJson(rightQuiz)).asJson().check(
                  isObject()
                      .value("id", quizId)
                      .value("title", isString())
                      .value("text", isString())
                      .value("options", isArray(any()))
              );
      
              JsonElement json = resp.getJson();
      
              CheckResult wrongResponse = CheckResult.wrong(
                  "The quiz sent to the program looked like this:\n" +
                      getPrettyJson(rightQuiz) + "\n\n" +
                      "But the received quiz looks like that:\n" +
                      getPrettyJson(json)
              );
      
              if (!json.isJsonObject()) {
                  return wrongResponse;
              }
      
              JsonObject obj = json.getAsJsonObject();
      
              if (!rightQuiz.equals(obj)) {
                  return wrongResponse;
              }
      
              return CheckResult.correct();
          }
      
          private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
              int quizId = quizIds[quizNum];
      
              String url = "/api/quizzes/" + (quizId + shift);
              HttpResponse resp = auth(get(url), user).send();
              checkStatusCode(resp, 404);
      
              return CheckResult.correct();
          }
      
          private CheckResult testAllQuizzes(int count, int page, int user) {
              String url = "/api/quizzes";
              HttpRequest req = get(url).addParam("page", "" + page);
              HttpResponse resp = auth(req, user).send();
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("content", isArray(count, isObject()
                          .value("id", isInteger())
                          .value("title", isString())
                          .value("text", isString())
                          .value("options", isArray(any()))
                      ))
                      .anyOtherValues()
              );
      
              return CheckResult.correct();
          }
      
          private CheckResult testCompletedQuizzes(int count, int user, int page, int indexForCheckingQuizId, int quizNum) {
              String url = "/api/quizzes/completed";
              HttpRequest req = get(url).addParam("page", "" + page);
              HttpResponse resp = auth(req, user).send();
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("content",
                          isArray(count,
                              isObject()
                                  .value("id", isInteger())
                                  .value("completedAt", isString()))
      
                              .item(indexForCheckingQuizId,
                                  isObject()
                                      .value("id", quizNum)
                                      .value("completedAt", isString()))
                      )
                      .anyOtherValues()
              );
      
              return CheckResult.correct();
          }
      
          private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
              String url = "/api/quizzes/" + quizNum + "/solve";
      
              HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
              HttpResponse resp = auth(req, user).send();
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("success", shouldResponse)
                      .value("feedback", isString())
              );
      
              return CheckResult.correct();
          }
      
          private CheckResult addIncorrectQuiz(String quiz, int user) {
              String url = "/api/quizzes";
              HttpRequest req = post(url, quiz);
              HttpResponse resp = auth(req, user).send();
              checkStatusCode(resp, 400);
              return CheckResult.correct();
          }
      
          private CheckResult testDelete(int quizNum, int user, int status) {
              String url = "/api/quizzes/" + quizNum;
              HttpRequest req = delete(url);
              HttpResponse resp = auth(req, user).send();
              checkStatusCode(resp, status);
              return CheckResult.correct();
          }
      
          private CheckResult reloadServer() {
              try {
                  reloadSpring();
              } catch (Exception ex) {
                  throw new UnexpectedError(ex.getMessage(), ex);
              }
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/engine/exceptions/UserAlreadyExistException.java
    visible: true
    learner_created: true
  - name: src/engine/repositories/UserRepository.java
    visible: true
    learner_created: true
  - name: src/engine/services/QuizServiceImpl.java
    visible: true
    text: |
      package engine.services;
      
      import engine.entities.Quiz;
      import engine.entities.QuizResponse;
      import lombok.extern.slf4j.Slf4j;
      import org.springframework.stereotype.Service;
      
      import java.util.*;
      import java.util.logging.Logger;
      
      @Slf4j
      @Service
      public class QuizServiceImpl implements QuizService {
      
          static final Logger LOGGER = Logger.getLogger("QuizServiceImpl");
      
          List<Quiz> quizList = new ArrayList<>();
          Long id = 1L;
          Quiz quiz = new Quiz(
                  (long) id,
                  "The Java Logo",
                  "What is depicted on the Java logo?",
                  List.of("Robot", "Tea leaf", "Cup of coffee", "Bug"),
                  List.of(2)
          );
      
          @Override
          public Quiz getQuiz() {
              return quiz;
          }
      
          @Override
          public QuizResponse postAnswer(Quiz quiz, Integer responseNumber) {
              if (quiz.getAnswer().equals(responseNumber)) {
                  return new QuizResponse(false, "Wrong answer! Please, try again.");
              }
              return new QuizResponse(true, "Congratulations, you're right!");
          }
      
          @Override
          public Quiz createQuiz(Quiz quiz) {
              quiz.setId(id);
              quizList.add(quiz);
              id += 1;
              return quiz;
          }
      
          @Override
          public Quiz findQuizById(Long id) {
              for (var quiz : quizList) {
                  if (quiz.getId().equals(id)) {
                      return quiz;
                  }
              }
              return null;
          }
      
          @Override
          public List<Quiz> findAllQuiz() {
              return quizList;
          }
      
          @Override
          public QuizResponse solveQuiz(Long quizId, Map<String, List<Integer>> answer) {
              Quiz findedQuiz = findQuizById(quizId);
              if (findedQuiz != null) {
                  LOGGER.info("Finded Quiz answer: " + findedQuiz.getAnswer());
                  LOGGER.info("Posted answer: " + answer.get("answer"));
                  if (!findedQuiz.getAnswer().equals(answer.get("answer"))) {
                      return new QuizResponse(false, "Wrong answer! Please, try again.");
                  }
                  return new QuizResponse(true, "Congratulations, you're right!");
              } else {
                  return null;
              }
          }
      }
    learner_created: true
  - name: src/engine/exceptions/UnAuthorizeActionException.java
    visible: true
    learner_created: true
  - name: src/engine/services/UserService.java
    visible: true
    learner_created: true
  - name: src/engine/entities/QuizResponse.java
    visible: true
    text: |
      package engine.entities;
      
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      @Getter
      @Setter
      @NoArgsConstructor
      @AllArgsConstructor
      public class QuizResponse {
          private boolean success;
          private String feedback;
      }
    learner_created: true
  - name: src/engine/repositories/QuizRepository.java
    visible: true
    learner_created: true
  - name: src/engine/entities/Quiz.java
    visible: true
    text: |
      package engine.entities;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import lombok.*;
      
      import javax.validation.constraints.NotEmpty;
      import javax.validation.constraints.NotNull;
      import javax.validation.constraints.Size;
      import java.util.ArrayList;
      import java.util.List;
      
      
      
      @Getter
      @Setter
      @NoArgsConstructor
      @AllArgsConstructor
      public class Quiz {
          private Long id;
          @NotEmpty
          private String title;
          @NotEmpty
          private String text;
          @NotNull
          @Size(min = 2)
          private List<String> options;
          @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
          private List<Integer> answer = new ArrayList<>();
      }
    learner_created: true
  - name: src/engine/controllers/QuizController.java
    visible: true
    text: |
      package engine.controllers;
      
      import engine.entities.Quiz;
      import engine.entities.QuizResponse;
      import engine.services.QuizService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import javax.validation.Valid;
      import java.util.*;
      
      @RestController
      @RequestMapping("/api")
      public class QuizController {
          private final QuizService quizService;
      
          @Autowired
          public QuizController(QuizService quizService) {
              this.quizService = quizService;
          }
      
          @GetMapping("/quiz")
          public ResponseEntity<?> getQuiz() {
              Quiz quiz = quizService.getQuiz();
              return ResponseEntity.ok(quiz);
          }
      
          @PostMapping("/quiz")
          public ResponseEntity<?> postAnswer(@RequestParam Integer answer) {
              Quiz quiz = quizService.getQuiz();
              QuizResponse quizResponse = quizService.postAnswer(quiz, answer);
              return ResponseEntity.ok(quizResponse);
          }
      
          @PostMapping("/quizzes")
          public ResponseEntity<?> createQuiz(@RequestBody @Valid Quiz quiz) {
              var createdQuiz = quizService.createQuiz(quiz);
              return ResponseEntity.ok(createdQuiz);
          }
      
          @GetMapping("/quizzes")
          public ResponseEntity<?> findAllQuiz() {
              List<Quiz> quizList = quizService.findAllQuiz();
              return ResponseEntity.ok(quizList);
          }
      
          @GetMapping("/quizzes/{id}")
          public ResponseEntity<?> findQuizById(@PathVariable Long id) {
              Quiz findedQuiz = quizService.findQuizById(id);
              if (findedQuiz != null) {
                  return ResponseEntity.ok(findedQuiz);
              } else {
                  return ResponseEntity.notFound().build();
              }
          }
      
          @PostMapping("/quizzes/{id}/solve")
          public ResponseEntity<?> postUserAnswer(@PathVariable(name = "id") Long quizId, @RequestBody Map<String, List<Integer>> answer) {
              QuizResponse quizResponse = quizService.solveQuiz(quizId, answer);
              if (quizResponse != null) {
                  return ResponseEntity.ok(quizResponse);
              } else {
                  return ResponseEntity.notFound().build();
              }
          }
      }
    learner_created: true
  - name: src/engine/services/QuizService.java
    visible: true
    text: |
      package engine.services;
      
      import engine.entities.Quiz;
      import engine.entities.QuizResponse;
      import org.springframework.stereotype.Service;
      import java.util.List;
      import java.util.Map;
      
      @Service
      public interface QuizService {
          Quiz getQuiz();
      
          QuizResponse postAnswer(Quiz quiz, Integer responseNumber);
      
          Quiz createQuiz(Quiz quiz);
          Quiz findQuizById(Long id);
          List<Quiz> findAllQuiz();
          QuizResponse solveQuiz(Long quizId, Map<String, List<Integer>> answer);
      }
    learner_created: true
  - name: src/engine/adapters/UserAdapter.java
    visible: true
    learner_created: true
  - name: src/engine/services/AppUserServiceImpl.java
    visible: true
    learner_created: true
  - name: src/engine/config/SecurityConfig.java
    visible: true
    learner_created: true
  - name: src/engine/exceptions/QuizNotFoundException.java
    visible: true
    learner_created: true
  - name: logfile.log
    visible: true
    text: |
      00:57 INFO  engine.WebQuizEngine - Starting WebQuizEngine using Java 17.0.2 on Boris with PID 18800 (started by Boris in C:\Users\XPS\IdeaProjects\Web Quiz Engine with Java\Web Quiz Engine with Java\task)
      00:57 INFO  engine.WebQuizEngine - No active profile set, falling back to default profiles: default
      00:57 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8889 (http)
      00:57 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
      00:57 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.54]
      00:57 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
      00:57 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3473 ms
      00:57 INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 15 endpoint(s) beneath base path '/actuator'
      00:58 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 8889 (http) with context path ''
      00:58 INFO  engine.WebQuizEngine - Started WebQuizEngine in 6.347 seconds (JVM running for 8.024)
      00:58 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
      00:58 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
      00:58 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
      00:58 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.util.ArrayList<java.lang.Integer>` from Object value (token `JsonToken.START_OBJECT`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.util.ArrayList<java.lang.Integer>` from Object value (token `JsonToken.START_OBJECT`)<LF> at [Source: (PushbackInputStream); line: 1, column: 1]]
      02:02 INFO  engine.WebQuizEngine - Starting WebQuizEngine using Java 17.0.2 on Boris with PID 13360 (started by Boris in C:\Users\XPS\IdeaProjects\Web Quiz Engine with Java\Web Quiz Engine with Java\task)
      02:02 INFO  engine.WebQuizEngine - No active profile set, falling back to default profiles: default
      02:02 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8889 (http)
      02:02 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
      02:02 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.54]
      02:03 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
      02:03 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2663 ms
      02:03 INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 15 endpoint(s) beneath base path '/actuator'
      02:03 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 8889 (http) with context path ''
      02:03 INFO  engine.WebQuizEngine - Started WebQuizEngine in 5.795 seconds (JVM running for 7.225)
      02:03 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
      02:03 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
      02:03 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:03 INFO  QuizServiceImpl - Posted answer: [0]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:03 INFO  QuizServiceImpl - Posted answer: [1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:03 INFO  QuizServiceImpl - Posted answer: [2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:03 INFO  QuizServiceImpl - Posted answer: [3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:03 INFO  QuizServiceImpl - Posted answer: [1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:03 INFO  QuizServiceImpl - Posted answer: [2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:03 INFO  QuizServiceImpl - Posted answer: [3]
      02:03 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 4, column: 4]]
      02:03 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:03 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 4, column: 4]]
      02:03 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:03 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<?> engine.controllers.QuizController.createQuiz(engine.entities.Quiz): [Field error in object 'quiz' on field 'options': rejected value [null]; codes [NotNull.quiz.options,NotNull.options,NotNull.java.util.List,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quiz.options,options]; arguments []; default message [options]]; default message [must not be null]] ]
      02:03 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:03 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: []
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: []
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: []
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: []
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: []
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:03 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:03 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:06 INFO  engine.WebQuizEngine - Starting WebQuizEngine using Java 17.0.2 on Boris with PID 26016 (started by Boris in C:\Users\XPS\IdeaProjects\Web Quiz Engine with Java\Web Quiz Engine with Java\task)
      02:06 INFO  engine.WebQuizEngine - No active profile set, falling back to default profiles: default
      02:06 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8889 (http)
      02:06 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
      02:06 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.54]
      02:06 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
      02:06 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2887 ms
      02:06 INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 15 endpoint(s) beneath base path '/actuator'
      02:06 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 8889 (http) with context path ''
      02:06 INFO  engine.WebQuizEngine - Started WebQuizEngine in 5.485 seconds (JVM running for 6.798)
      02:06 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
      02:06 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
      02:06 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:06 INFO  QuizServiceImpl - Posted answer: [0]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:06 INFO  QuizServiceImpl - Posted answer: [1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:06 INFO  QuizServiceImpl - Posted answer: [2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [2]
      02:06 INFO  QuizServiceImpl - Posted answer: [3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:06 INFO  QuizServiceImpl - Posted answer: [1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:06 INFO  QuizServiceImpl - Posted answer: [2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1]
      02:06 INFO  QuizServiceImpl - Posted answer: [3]
      02:06 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 4, column: 4]]
      02:06 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:06 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 4, column: 4]]
      02:06 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:06 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<?> engine.controllers.QuizController.createQuiz(engine.entities.Quiz): [Field error in object 'quiz' on field 'options': rejected value [null]; codes [NotNull.quiz.options,NotNull.options,NotNull.java.util.List,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quiz.options,options]; arguments []; default message [options]]; default message [must not be null]] ]
      02:06 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:06 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('"' (code 34)): was expecting comma to separate Object entries<LF> at [Source: (PushbackInputStream); line: 5, column: 4]]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: []
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: []
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: []
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: []
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: []
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: []
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [1, 2, 3]
      02:06 INFO  QuizServiceImpl - Finded Quiz answer: [0, 1, 3]
      02:06 INFO  QuizServiceImpl - Posted answer: [0, 1, 2, 3]
    learner_created: true
  - name: src/engine/controllers/UserController.java
    visible: true
    learner_created: true
  - name: src/engine/entities/User.java
    visible: true
    learner_created: true
  - name: src/engine/services/UserServiceImpl.java
    visible: true
    learner_created: true
  - name: src/engine/exceptions/QuizGlobalExceptions.java
    visible: true
    learner_created: true
  - name: src/engine/entities/PageableQuiz.java
    visible: true
    learner_created: true
  - name: src/engine/entities/QuizSolve.java
    visible: true
    learner_created: true
  - name: src/engine/repositories/QuizSolveRepository.java
    visible: true
    learner_created: true
  - name: src/engine/services/QuizSolveService.java
    visible: true
    learner_created: true
  - name: src/engine/services/QuizSolveServiceImpl.java
    visible: true
    learner_created: true
  - name: src/engine/entities/PageableSolveQuiz.java
    visible: true
    learner_created: true
  - name: logfile.log.2024-05-31.0.gz
    visible: true
    is_binary: true
    learner_created: true
  - name: logfile.log.2024-06-02.0.gz
    visible: true
    is_binary: true
    learner_created: true
  - name: logfile.log.2024-06-03.0.gz
    visible: true
    is_binary: true
    learner_created: true
  - name: logfile.log.2024-06-04.0.gz
    visible: true
    is_binary: true
    learner_created: true
  - name: logfile.log.2024-06-05.0.gz
    visible: true
    is_binary: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/8257#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 06 Jun 2024 11:24:02 UTC"
record: -1
